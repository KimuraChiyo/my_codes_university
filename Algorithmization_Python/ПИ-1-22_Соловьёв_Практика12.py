# 1
print('1. Выполните на придуманных Вами примерах (по 2-3 шт. с разными типами данных) основные операции над множествами: − объединение, − пересечение, − разность, − принадлежность одного множества в другому. ')
set_int_1 = {1, 2, 3, 4, 5}
print("Множество целых 1:", set_int_1)
set_int_2 = {4, 5, 6, 7, 8}
print("Множество целых 2:", set_int_2)
set_int_union = set_int_1 | set_int_2
print("Пересечение целых множеств 1 и 2:", set_int_union)
set_int_intersection = set_int_1 & set_int_2
print("Объединение целых множеств 1 и 2:", set_int_intersection)
set_int_difference_12 = set_int_1 - set_int_2
print("Разность целых множеств 1 и 2(1 - 2):", set_int_difference_12)
set_int_difference_21 = set_int_2 - set_int_1
print("Разность целых множеств 1 и 2(2 - 1):", set_int_difference_21)
print("Принадлежность 1 целого множества ко 2:", set_int_2.issuperset(set_int_1))

set_strings_1 = set('abraham lincoln')
print("\nМножество строк 1:", set_strings_1)
set_strings_2 = set('cobra')
print("Множество строк 2:", set_strings_2)
set_strings_union = set_strings_1 | set_strings_2
print("Пересечение строковых множеств 1 и 2:", set_strings_union)
set_strings_intersection = set_strings_1 & set_strings_2
print("Объединение строковых множеств 1 и 2:", set_strings_intersection)
set_strings_difference_12 = set_strings_1 - set_strings_2
print("Разность строковых множеств 1 и 2(1 - 2):", set_strings_difference_12)
set_strings_difference_21 = set_strings_2 - set_strings_1
print("Разность строковых множеств 1 и 2(2 - 1):", set_strings_difference_21)
print("Принадлежность 1 строкового множества ко 2:", set_strings_2.issuperset(set_strings_1))

# 2
studs = [['рус', 'англ'], ['рус', 'англ', 'франц'], ['рус', 'англ', 'нем']]
every = {'рус', 'англ', 'франц', 'нем'}
only_one = set()
for i in studs:
    every &= set(i)
    only_one |= set(i)
print("Языки, которые знают все школьники:", ', '.join(list(every)))
print("Языки, которые знает хотя бы один школьник:", ', '.join(list(only_one)))

# 3
print('\n3. Во входном файле (вы можете читать данные из файла (input.txt) записан текст. Словом считается последовательность непробельных символов идущих подряд, слова разделены одним или большим числом пробелов или символами конца строки. Определите, сколько различных слов содержится в этом тексте')
with open('file.txt') as f:
    text = f.readlines()
w = set()
for i in range(len(text)):
    a = text[i].strip().split()
    for j in a:
        w.add(j)
print(len(w))

# 4
print("\n4. Даны два словаря: dictionary_1 = {'a': 300, 'b': 400} и dictionary_2 = {'c': 500, 'd': 600}. Объедините их в один при помощи встроенных функций языка Python.")
dictionary_1 = {'a': 300, 'b': 400}
dictionary_2 = {'c': 500, 'd': 600}
n = dictionary_1 | dictionary_2
print("Объединенный словарь:", n)

# 5
print("\n5. Найдите три ключа с самыми высокими значениями в словаре my_dict = {'a':500, 'b':5874, 'c': 560, 'd':400, 'e':5874, 'f': 20}.")
my_dict = {'a':500, 'b':5874, 'c': 560, 'd':400, 'e':5874, 'f': 20}
n = {i[0]: i[1] for i in sorted(my_dict.items(), key= lambda x: -x[1])[:3]}
print("Ключи с наибольшими значениями:", *list(n.keys()))

# 6
print('\n6. Создайте словарь, в котором ключами будут числа от 1 до 10, а значениями эти же числа, возведенные в куб.')
dct = {i: i ** 3 for i in range(1, 11)}
print(dct)

# 7
print('\n7. Даны два списка одинаковой длины. Необходимо создать из них словарь таким образом, чтобы элементы первого списка были ключами, а элементы второго — соответственно значениями нашего словаря.')
frst = list(range(1, 11))
scnd = list(map(lambda x: x ** 2, range(1, 11)))
d = {frst[i]: scnd[i] for i in range(len(frst))}
print(d)

# 8
print('\n8. Инвертировать словарь, т.е. поменять ключи со значениями.\n+ 9. Создайте словарь, где ключами являются числа, а значениями – строки. Примените к нему метод items(), полученный объект dict_items передайте в написанную вами функцию, которая создает и возвращает новый словарь, "обратный" исходному, т. е. ключами являются строки, а значениями – числа.')
def rev(dct_items):
    d = {i[1]: i[0] for i in dct_items}
    return d


d = {1: 'one', 2: 'two', 3: 'three'}
print(rev(d.items()))

# 9
d = {i: str(i) for i in range(1, 4)}
d2 = {value: key for key, value in d.items()}
print(d, d2)


# 11
print('\n11. Банковские счета. Некоторый банк хочет внедрить систему управления счетами клиентов, поддерживающую следующие операции: пополнение счета клиента; снятие денег со счета; запрос остатка средств на счете; перевод денег между счетами клиентов; начисление процентов всем клиентам. Необходимо реализовать такую систему. Клиенты банка идентифицируются именами (уникальная строка, не содержащая пробелов). Первоначально у банка нет ни одного клиента. Как только для клиента проводится операция пололнения, снятия или перевода денег, ему заводится счет с нулевым балансом. Все дальнейшие операции проводятся только с этим счетом. Сумма на счету может быть как положительной, так и отрицательной, при этом всегда является целым числом.')
bank = {}
print('Доступные операции: add, draw, left, repl, proc, stop')
operation = input('Введите операцию: ')
while operation != 'stop':
    user = input('Введите ваш login клиента: ')
    if operation == 'add':
        money = int(input('На какое количество вы хотите пополнить счёт: '))
        bank[user] = bank.get(user, 0) + money
    elif operation == 'draw':
        money = int(input('Какое количество вы хотите снять со счёта: '))
        bank[user] = bank.get(user, 0) - money
    elif operation == 'left':
        bank[user] = bank.get(user, 0)
        print("На вашем счёту:", bank[user])
    elif operation == 'repl':
        money = int(input('Какое количество вы хотите перевести на другой счёт: '))
        user_to = input('Введите login другого человека: ')
        bank[user] = bank.get(user, 0) - money
        bank[user_to] = bank.get(user_to, 0) + money
    elif operation == 'proc':
        if len(bank) != 0:
            proc = int(input('Введите количество процентов: '))
            for i in bank.keys():
                bank[i] = int(abs(bank[i]) * (1 + proc / 100))
        else:
            print('У банка нет клиентов')
    print(bank)
    if operation == 'stop':
        break
    print('Доступные операции: add, draw, left, repl, proc, stop')
    operation = input('Введите операцию: ')

# 12
print('\n12. Создать базу данных на основе словаря, в котором хранится информация по студентам 2-х групп (ФИО, адрес, телефон), а также их оценки по 3-м предметам (Алгоритмизация и программирование, Информатика, Физкультура, всего по 4 оценки в каждом предмете, для каждого студента). Вывести на печать в виде таблицы оценки студентов групп, среднюю успеваемость студентов в группе, среднюю успеваемость по группе в целом. Оформить данные в виде отчета.')
kgeu = {'ПИ-1-22': {'Соловьёв Леонид Александрович': {'address': 'г. Казань',
                                                  'phone': '+7-777-777-77-77',
                                                  'tabel': {'Алгоритмизация': [5, 4, 5, 4],
                                                            'Информатика': [5, 5, 5, 5],
                                                            'Физкультура': [4, 3, 4, 4]}
                                                  },
                    'Байрамшин Арсений Вадимович': {'address': 'г. Казань',
                                                   'phone': '+7-777-777-77-77',
                                                   'tabel': {'Алгоритмизация': [4, 4, 5, 4],
                                                             'Информатика': [5, 5, 3, 5],
                                                             'Физкультура': [3, 5, 3, 4]}
                                                   }

                    },
        'ПИ-2-22': {'Хайруллина Гузель Илдаровна': {'address': 'г. Казань',
                                                       'phone': '+7-777-777-77-77',
                                                       'tabel': {'Алгоритмизация': [5, 5, 5, 5],
                                                                 'Информатика': [5, 5, 5, 5],
                                                                 'Физкультура': [5, 5, 5, 5]}
                                                       },
                    'Шагимарданова Гульназ Фанилевна': {'address': 'г. Казань',
                                                  'phone': '+7-777-777-77-77',
                                                  'tabel': {'Алгоритмизация': [5, 4, 4, 4],
                                                            'Информатика': [5, 3, 4, 3],
                                                            'Физкультура': [5, 5, 5, 5]}
                                                  }
                    }
        }
for i in kgeu.keys():
    group = kgeu[i]
    print('Группа ' + i)
    c = len(group.keys())  # количество человек
    print('Количество человек в группе:', c)
    d = {'Алгоритмизация': [], 'Информатика': [], 'Физкультура': []}
    for k in group.keys():
        print(11 * ' ' + k + ':')
        print(*[24 * ' ' + i[0] + ': ' + ', '.join(map(str, i[1])) for i in group[k]['tabel'].items()], sep='\n')
        print(24 * ' ' + 'Средняя успеваемость: ')
        print(*[34 * ' ' + i[0] + ': ' + str(sum(i[1]) / len(i[1])) for i in group[k]['tabel'].items()], sep='\n')
        for l in group[k]['tabel'].items():
            d[l[0]].append(sum(l[1]) / 4)
    print("Средняя успеваемость группы", i, "\b:")
    for j in d.keys():
        print(23 * ' ', j + ':', sum(d[j]) / c)
    print()

# 13
def ShiftRight(N):
    N = str(N)
    N = N[-1:] + N[:-1]
    return int(N)

print('\n13. Описать процедуру ShiftRight(N), выполняющую правый циклический сдвиг числа N: значение N1 переходит в N2, значение N2 — в N3, значение Nk — в N1 (N —целое, являющиеся одновременно входным и выходным). С помощью этой процедуры выполнить правый циклический сдвиг для трех наборов 3, 5, 10 значных чисел.')
tri = [123, 121, 321]
print(tri, [ShiftRight(n) for n in tri])
pyat = [12345, 54321, 12341]
print(pyat, [ShiftRight(n) for n in pyat])
ten = [1234536865, 1234123432]
print(ten, [ShiftRight(n) for n in ten])

# 14
def ShiftLeft3(N):
    N = str(N)
    N = N[3:] + N[:3]
    return int(N)

print('\n14.Описать процедуру ShiftLeft3(A, B, C), выполняющую левый циклический сдвиг: Описать процедуру ShiftLeft3(N), выполняющую левый циклический сдвиг: значение N1 переходит в Nk, значение N3 — в N2, значение Nk — в Nk-1 (N —целое, являющиеся одновременно входным и выходным). С помощью этой процедуры выполнить правый циклический сдвиг для трех наборов 4, 6, 11 значных чисел.')
chet = [1234, 1214, 3241]
print(chet, [ShiftLeft3(n) for n in chet])
six = [12345, 54321, 12341]
print(six, [ShiftLeft3(n) for n in six])
oneone = [12345368635, 12341223432]
print(oneone, [ShiftLeft3(n) for n in oneone])

# 15
def IsSquare(K):
    return int(K ** 0.5) ** 2 == K

print('\n15.Описать функцию IsSquare(K) логического типа, возвращающую True, если целый параметр K (> 0) является квадратом некоторого целого числа, и False в противном случае. С ее помощью найти количество квадратов в наборе из 5 целых положительных чисел.')
print([1, 2, 9, 4, 5])
print('Количество квадратов:', sum([IsSquare(i) for i in [1, 2, 9, 4, 5]]))

# 16
print('\n16. Робот может перемещаться в четырех направлениях («С» — север, «З» — запад, «Ю» — юг, «В» — восток) и принимать три цифровые команды: 0 — продолжать движение, 1 — поворот налево, –1 — поворот направо. Дан символ C — исходное направление робота и целое число N — посланная ему команда (вводится в основной программе). Вывести направление робота после выполнения k-полученных команд.')
a = ['С', 'З', 'Ю', 'В']
c = input('Введите исходное направление робота: ')
k = int(input("k: "))
for i in range(k):
    n = int(input("направление: "))
    c = a[(a.index(c) + n) % 4]
    print(c)